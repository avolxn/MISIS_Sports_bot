from aiogram import types
from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from .text import *
from backend.cors import *
import re

router = Router()


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class User(StatesGroup):
    language = State()
    last_name = State()
    first_name = State()
    student_id = State()
    reg_finished = State()


# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(User.language)
async def reg_start(message: types.Message, state: FSMContext) -> None:
    """
    –í –Ω–∞—á–∞–ª–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–∑—ã–∫
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        state (FSMContext): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    Returns: None
    """
    kb = [
        [types.KeyboardButton(text="üá¨üáß English")],
        [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
        [types.KeyboardButton(text="üá©üá™ Deutsch")],
        [types.KeyboardButton(text="üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©")],
        [types.KeyboardButton(text="üáÆüá± ◊¢◊ë◊®◊ô◊™")],
        [
            types.KeyboardButton(
                text="ü§ñ 01000010 01101001 01101110 01100001 01110010 01111001"
            )
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
    await message.answer(CHOOSE_LANGUAGE, reply_markup=keyboard)
    await state.set_state(User.last_name)


@router.message(User.last_name)
async def language_chosen(message: types.Message, state: FSMContext) -> None:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é, –∑–∞—Ç–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏–º—è –∏ —Å—Ç—É–¥.–±–∏–ª–µ—Ç.
    –ï—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        state (FSMContext): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    Returns: None
    """
    if not message.text in LANGUAGES:
        await message.answer(CHOOSE_LANGUAGE)
        return
    await state.update_data(language=LANGUAGES.index(message.text))
    data = await state.get_data()
    await message.answer(
        WHATS_LASTNAME[data["language"]], reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(User.first_name)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏
@router.message(User.first_name)
async def lastname_chosen(message: types.Message, state: FSMContext) -> None:
    """–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å–º. –≤ language_chosen"""
    data = await state.get_data()
    if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë]+(?:[- ]?[–ê-–Ø–∞-—è–Å—ë]+)*$", message.text):
        await message.answer(ERROR_LASTNAME[data["language"]])
        return
    await state.update_data(last_name=message.text.title())
    language = int(data.get("language", False))
    await message.answer(WHATS_FIRSTNAME[language])
    await state.set_state(User.student_id)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@router.message(User.student_id)
async def first_name_chosen(message: types.Message, state: FSMContext) -> None:
    """–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å–º. –≤ language_chosen"""
    data = await state.get_data()
    if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë]+(?:[- ]?[–ê-–Ø–∞-—è–Å—ë]+)*$", message.text):
        await message.answer(ERROR_FIRSTNAME[data["language"]])
        return
    await state.update_data(first_name=message.text.title())
    language = int(data.get("language", False))
    await message.answer(WHATS_STUDENTID[language])
    await state.set_state(User.reg_finished)


# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(User.reg_finished)
async def student_id_chosen(message: types.Message, state: FSMContext) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—É–¥. –±–∏–ª–µ—Ç–∞
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ú–æ–∂–Ω–æ —Å–º–µ–ª–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ø–∞—Ä—ã.
    """
    data = await state.get_data()
    language = int(data.get("language", False))
    if not re.match(r"^\d{7}$", message.text):
        await message.answer(ERROR_STUDENTID[language])
    else:
        data = await state.get_data()
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        await register_student(
            telegram_id=message.from_user.id,
            last_name=data["last_name"],
            first_name=data["first_name"],
            student_id=message.text,
            language=data["language"],
        )
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(REGISTERED_SUCCESSFULLY[data["language"]])
        await state.clear()
        await state.set_data(data)
